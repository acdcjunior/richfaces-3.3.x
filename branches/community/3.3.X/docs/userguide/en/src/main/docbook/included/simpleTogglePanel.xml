<?xml version='1.0' encoding='UTF-8'?>
<section>
  <sectioninfo>
    <keywordset>
      <keyword>panel</keyword>
      <keyword>rich:simpleTogglePanel</keyword>
      <keyword>HtmlSimpleTogglePanel</keyword>
      <keyword>switch</keyword>
    </keywordset>
  </sectioninfo>

  <table>
    <title>Component identification parameters</title>
    <tgroup cols="2">
      <thead>
        <row>
          <entry>Name</entry>
          <entry>Value</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>component-type</entry>
          <entry>org.richfaces.SimpleTogglePanel</entry>
        </row>
        <row>
          <entry>component-class</entry>
          <entry>org.richfaces.component.html.HtmlSimpleTogglePanel</entry>
        </row>
        <row>
          <entry>component-family</entry>
          <entry>org.richfaces.SimpleTogglePanel</entry>
        </row>
        <row>
          <entry>renderer-type</entry>
          <entry>org.richfaces.SimpleTogglePanelRenderer</entry>
        </row>
        <row>
          <entry>tag-class</entry>
          <entry>org.richfaces.taglib.SimpleTogglePanelTag</entry>
        </row>
      </tbody>
    </tgroup>
  </table>

  <section>
    <title>Creating the Component with a Page Tag</title>
    <para>To create the simplest variant on a page use the following syntax:</para>

    <para>
      <emphasis role="bold">Example:</emphasis>
    </para>
    <programlisting role="XML"><![CDATA[...
<rich:simpleTogglePanel>
    ...
</rich:simpleTogglePanel>
...]]></programlisting>
  </section>
  <section>
    <title>Creating the Component Dynamically Using Java</title>

    <para>
      <emphasis role="bold">Example:</emphasis>
    </para>
    <programlisting role="JAVA"><![CDATA[import org.richfaces.component.html.HtmlSimpleTogglePanel;
...
HtmlSimpleTogglePanel myPanel = new HtmlSimpleTogglePanel();
...
]]></programlisting>
  </section>
  <section>
    <title>Details of Usage</title>
    <para>The component is a simplified version of <property>toggle panel</property> that initially
      has a defined layout as a panel with a header playing a role of a mode switching control. On a
      component header element, it&apos;s possible to define a label using an attribute with the
      same name.</para>

    <para>Switching mode could be defined with the <emphasis>
        <property>&quot;switchType&quot;</property>
      </emphasis> attribute with three possible parameters.</para>
    <itemizedlist>
      <listitem><para> <code>Server</code> (DEFAULT)</para><para>The common submission is performed around
            <property>simpleTogglePanel</property> and a page is completely rendered on a called
          panel. Only one at a time panel is uploaded onto the client side.</para>
      </listitem>
      <listitem><para><code> Ajax</code></para><para>AJAX form submission is performed around the panel, content of the called
          panel is uploaded on Ajax request and additionally specified elements in the <emphasis>
            <property>&quot;reRender&quot;</property>
          </emphasis> attribute are rendered. Only one at a time panel is uploaded on the client
          side.</para>
      </listitem>
      <listitem><para><code>Client</code></para> <para> All panels are uploaded on the client side. Switching from the active
          to the hidden panel is performed with client JavaScript.</para>
      </listitem>
    </itemizedlist>
    <para>The <emphasis role="bold"
      ><property>&lt;rich:simpleTogglePanel&gt;</property></emphasis>component also has an <emphasis>
      <property>&quot;opened&quot;</property>
      </emphasis> attribute responsible for keeping a panel state. It gives an
      opportunity to manage state of the component from a model.
      If the value of this attribute is&quot;true&quot; the component is expanded.
    </para>

    <!--SIMPLE EXAMPLE NEEDED -->

    <itemizedlist>
      <listitem><para> <emphasis><property>&quot;onmouseover &quot;</property></emphasis></para></listitem>
      <listitem><para> <emphasis><property>&quot;onclick &quot;</property></emphasis></para></listitem>
      <listitem><para> <emphasis><property>&quot;onmouseout &quot;</property></emphasis></para></listitem>
      <listitem><para> etc. </para></listitem>
    </itemizedlist>
    <figure>
      <title><emphasis role="bold"><property>&lt;rich:simpleTogglePanel&gt;</property></emphasis> states</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/simpleTogglePanel2.png"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>
	<para>
		With help of
	      <emphasis>
	        <property>
	          &quot;openMarker&quot;
	        </property>
	      </emphasis>
	   and
	  <emphasis>
	    <property>
	      &quot;closeMarker&quot;
	    </property>
	  </emphasis> facets you can set toggle icon for
	  <property>
	    simpleTogglePanel
	  </property>.
	</para>
     Information about the <emphasis><property>&quot;process&quot;</property></emphasis> attribute usage you can find <link linkend="process">&quot; Decide what to process &quot; </link> guide section.
    </para>

  </section>
  
  <section>
		<title>Facets</title>
		<table>
			<title>Facets</title>
				<tgroup cols="2">
					<thead>
						<row>
							<entry>Facet name</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>openMarker</entry>
							<entry>Redefines the icon for expanding the panel</entry>
						</row>
						<row>
							<entry>closeMarker</entry>
							<entry>Redefines the icon for collapsing the panel</entry>
						</row>

					</tbody>
				</tgroup>
		</table>
	</section>
  
  <section>
    <title>Look-and-Feel Customization</title>
    <para>For skinnability implementation, the components use a <emphasis>
      <property>style class redefinition method.</property>
    </emphasis> Default style classes are mapped on <emphasis>
      <property>skin parameters.</property>
    </emphasis></para>

    <para>There are two ways to redefine the appearance of all <emphasis role="bold">
      <property>&lt;rich:simpleTooglePanel&gt;</property>
    </emphasis> components at once:</para>

    <itemizedlist>
      <listitem>
        <para>Redefine the corresponding skin parameters</para>
      </listitem>

      <listitem>
        <para>Add to your style sheets <emphasis>
          <property>style classes</property>
        </emphasis> used by a <emphasis role="bold">
          <property>&lt;rich:simpleTooglePanel&gt;</property>
        </emphasis> component</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Skin Parameters Redefinition</title>
    <table>
      <title>Skin parameters for a whole component</title>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Skin parameters</entry>
            <entry>CSS properties</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>generalBackgroundColor</entry>
            <entry>background-color</entry>
          </row>
          <row>
            <entry>panelBorderColor</entry>
            <entry>border-color</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Skin parameters for a header element</title>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Skin parameters</entry>
            <entry>CSS properties</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>headerBackgroundColor</entry>
            <entry>background-color</entry>
          </row>
          <row>
            <entry>headerBackgroundColor</entry>
            <entry>border-color</entry>
          </row>
          <row>
            <entry>headerSizeFont</entry>
            <entry>font-size </entry>
          </row>
          <row>
            <entry>headTextColor</entry>
            <entry>color</entry>
          </row>
          <row>
            <entry>headerWeightFont</entry>
            <entry>font-weight</entry>
          </row>
          <row>
            <entry>headerFamilyFont</entry>
            <entry>font-family</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Skin parameters for a body element</title>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Skin parameters</entry>
            <entry>CSS properties</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>generalBackgroundColor</entry>
            <entry>background-color</entry>
          </row>
          <row>
            <entry>generalSizeFont</entry>
            <entry>font-size</entry>
          </row>
          <row>
            <entry>panelTextColor</entry>
            <entry>color</entry>
          </row>
          <row>
            <entry>generalFamilyFont</entry>
            <entry>font-family</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section>
    <title>Definition of Custom Style Classes</title>

    <para>On the screenshot there are classes names that define styles for component elements.</para>

    <figure>
      <title>Style classes</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/simpleTogglePanel_cn.png"/>
        </imageobject>
      </mediaobject>
    </figure>

    <table id="simpTogPanC">
      <title>Classes names that define a component appearance</title>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Class name</entry>
            <entry>Class description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>rich-stglpanel</entry>
            <entry>Defines styles for a wrapper  &lt;div&gt; element of a component</entry>
          </row>
          <row>
            <entry>rich-stglpanel-header</entry>
            <entry>Defines styles for header element of a component</entry>
          </row>
          <row>
            <entry>rich-stglpnl-marker</entry>
            <entry>Defines styles for a wrapper  &lt;div&gt; element of a marker</entry>
          </row>

          <row>
            <entry>rich-stglpanel-body</entry>
            <entry>Defines styles for a component content</entry>
          </row>
        </tbody>
      </tgroup>
    </table>


    <table>
      <title>Style component classes</title>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Class name</entry>
            <entry>Class description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>styleClass</entry>
            <entry>The class defines panel common style. It&apos;s used in the outside <emphasis
                role="bold">
                <property>&lt;div&gt;</property>
              </emphasis>element</entry>
          </row>
          <row>
            <entry>bodyClass</entry>
            <entry>applicable to panels body elements</entry>
          </row>
          <row>
            <entry>headerClass</entry>
            <entry>applicable to header elements</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>In order to redefine styles for all <emphasis role="bold">
      <property>&lt;rich:simpleTogglePanel&gt;</property>
    </emphasis> components on a page using CSS, it&apos;s enough to create classes with the
      same names (possible classes could be found in the tables <link linkend="simpTogPanC"> above</link>) and define necessary properties in them. </para>

    <para>
      <emphasis role="bold">Example:</emphasis>
    </para>
    <programlisting role="CSS"><![CDATA[...
.rich-stglpanel-header{
    font-style:italic;
}
...]]></programlisting>

    <para>This is a result:</para>

    <figure>
      <title>Redefinition styles with predefined classes</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/simpleTogglePanel_pc.png"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>In the example the font style for header was changed.</para>

    <para>Also it&apos;s possible to change styles of particular <emphasis role="bold"
      ><property>&lt;rich:simpleTogglePanel&gt;</property></emphasis> component. In this case you should create own style classes and use them in corresponding <emphasis role="bold"
        ><property>&lt;rich:simpleTogglePanel&gt;</property></emphasis> <emphasis><property>styleClass</property></emphasis> attributes. An example is placed below:</para>

    <para>
      <emphasis role="bold">Example:</emphasis>
    </para>
    <programlisting role="CSS"><![CDATA[...
.myClass{
    background-color:#ffead9;
}
...]]></programlisting>
    <para>The <emphasis><property>&quot;bodyClass&quot;</property></emphasis> attribute for <emphasis role="bold"
      ><property>&lt;rich:simpleTogglePanel&gt;</property></emphasis> is defined as it&apos;s shown in the example below:</para>

    <para>
      <emphasis role="bold">Example:</emphasis>
    </para>
    <programlisting role="XML"><![CDATA[<rich:simpleTogglePanel ... bodyClass="myClass"/>
]]></programlisting>

    <para>This is a result:</para>

    <figure>
      <title>Redefinition styles with own classes and <emphasis><property>styleClass</property></emphasis> attributes</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/simpleTogglePanel_oc.png"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>As it could be seen on the picture above,background color for body was changed.</para>



  </section>
  <section>
    <title>Relevant Resources Links</title>
    <para>
      <ulink
        url="http://livedemo.exadel.com/richfaces-demo/richfaces/simpleTogglePanel.jsf?c=simpleTogglePanel"
        >On the component LiveDemo page</ulink> you can see the example of <emphasis role="bold"
        ><property>&lt;rich:simpleTogglePanel&gt;</property></emphasis> usage and sources for the given example.
    </para>
  </section>
</section>
