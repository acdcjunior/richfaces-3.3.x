<?xml version='1.0' encoding='UTF-8'?>
<section>
	<sectioninfo>
		<keywordset>
			<keyword>on-keypress suggestion</keyword>
			<keyword>rich:suggestionbox</keyword>
			<keyword>HtmlsuggestionBox</keyword>
		</keywordset>
	</sectioninfo>

	<section>
		<title>Details of Usage</title>

		<section>
			<title>Main attributes</title>
			<para>There are 3 main component attributes:</para>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis>
							<property>&quot;for&quot;</property>
						</emphasis>
						contains an ID of an input component
						for which the suggestion
						support is provided
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>
							<property>&quot;suggestionAction&quot;</property>
						</emphasis>
						defines the method to get a collection of suggestion data on
						request
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>
							<property>&quot;var&quot;</property>
						</emphasis>
						defines a collection name that provides an access for the current
						row while iterating through
					</para>
				</listitem>
			</itemizedlist>
			<para>To create the simplest variant on a page use the following
				syntax:</para>
			<programlisting role="XML"><![CDATA[...
<h:inputText id="city" value="#{capitalsBean.capital}" />
<rich:suggestionbox for="city" var="result" suggestionAction="#{capitalsBean.autocomplete}">
	<h:column>
		<h:outputText value="#{result.name}" />
	</h:column>
</rich:suggestionbox>
...
]]></programlisting>
			<para>
				There is a managed bean:
			</para>
			<programlisting role="JAVA"><![CDATA[...			
public class SBbean {

	private ArrayList<Capital> capitals = new ArrayList<Capital>();
	private ArrayList<String> capitalsNames = new ArrayList<String>();
	private List<SelectItem> capitalsOptions = new ArrayList<SelectItem>();
	private String capital = "";

	public List<Capital> autocomplete(Object suggest) {
		String pref = (String) suggest;
		ArrayList<Capital> result = new ArrayList<Capital>();

		Iterator<Capital> iterator = getCapitals().iterator();
		while (iterator.hasNext()) {
			Capital elem = ((Capital) iterator.next());
			if ((elem.getName() != null && elem.getName().toLowerCase()
					.indexOf(pref.toLowerCase()) == 0)
					|| "".equals(pref)) {
				result.add(elem);
			}
		}
		return result;
	}

	public SBbean() {
		URL rulesUrl = getClass().getResource("capitals-rules.xml");
		Digester digester = DigesterLoader.createDigester(rulesUrl);
		digester.push(this);
		try {
			digester.parse(getClass().getResourceAsStream("capitals.xml"));
		} catch (IOException e) {
			throw new FacesException(e);
		} catch (SAXException e) {
			throw new FacesException(e);
		}
		capitalsNames.clear();
		for (Capital cap : capitals) {
			capitalsNames.add(cap.getName());
		}
		capitalsOptions.clear();
		for (Capital cap : capitals) {
			capitalsOptions.add(new SelectItem(cap.getName(), cap.getState()));
		}
	}

	public String addCapital(Capital capital) {
		capitals.add(capital);
		return null;
	}
}	
]]></programlisting>
			<para>
				In the example above when suggestion item (city) is selected it is
				set as a value of
				<code>&lt;h:inputText id="city"/&gt;</code>
				.
			</para>
			<para>
				Here is a result:
			</para>
			<figure>
				<title>
					<emphasis role="bold">
						Simple
						<property>&lt;rich:suggestionbox&gt;</property>
					</emphasis>
				</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/suggestionbox_simple.png" />
					</imageobject>
				</mediaobject>
			</figure>

			<para>
				The
				<emphasis role="bold">
					<property>&lt;rich:suggestionbox&gt;</property>
				</emphasis>
				component could get any collection
				and outputs it in a
				popup in
				several columns. The
				<emphasis>
					<property>&quot;fetchValue&quot;</property>
				</emphasis>
				attribute points to the data that is inserted into the input field
				if a particular row is selected
				or clicked from the suggested list.
				Therefore when some string is chosen input
				receives the proper value.
			</para>
			<programlisting role="XML"><![CDATA[...
<h:inputText id="city" value="#{capitalsBean.capital}" />
<rich:suggestionbox for="city" var="result" fetchValue="#{result.state}"
					suggestionAction="#{capitalsBean.autocomplete}">
	<h:column>
		<h:outputText value="#{result.name}" />
	</h:column>
	<h:column>
		<h:outputText value="#{result.state}" />
	</h:column>
</rich:suggestionbox>
...
]]></programlisting>
			<para>
				In the example above if you choose any string input will receive the
				corresponding value
				from the second column containing
				<code>#{result.state}</code>
				.
			</para>
			<para>Here is a result:</para>
			<figure>
				<title>
					<emphasis role="bold">
						<property>&lt;rich:suggestionbox&gt;</property>
					</emphasis>
					with output in several columns
				</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/suggestionbox2.png" />
					</imageobject>
				</mediaobject>
			</figure>
			<para>
				There is also one more important attribute named
				<emphasis>
					<property>&quot;tokens&quot;</property>
				</emphasis>
				that specifies separators after which a set of some
				characters
				sequence is defined as a new prefix beginning from this
				separator and
				not from the string beginning.
			</para>
			<para>
				<emphasis role="bold">Example:</emphasis>
			</para>
			<programlisting role="XML"><![CDATA[...
<h:inputText id="city" value="#{capitalsBean.capital}" />
<rich:suggestionbox for="city" var="result" suggestionAction="#{capitalsBean.autocomplete}" 
					tokens=",">
	<h:column>
		<h:outputText value="#{result.name}" />
	</h:column>
</rich:suggestionbox>
...
]]></programlisting>
			<para>This example shows that when a city is chosen and a comma and
				first letter
				character are input, Ajax request is called again, but
				it
				submits a
				value starting from the last token:</para>
			<figure>
				<title>
					<emphasis role="bold">
						<property>&lt;rich:suggestionbox&gt;</property>
					</emphasis>
					with chosen word
				</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/suggestionbox3.png" />
					</imageobject>
				</mediaobject>
			</figure>
			<para>For
				a multiple definition use either &quot;
				<code>,.;[]</code>
				&quot;
				syntax as a value for
				<emphasis>
					<property>&quot;tokens&quot;</property>
				</emphasis>
				attribute or link a parameter to some bean
				property that transmits
				separators collection.
			</para>
		</section>
		<section>
			<title>JavaScript API</title>
			<para>
				There is such feature of the
				<emphasis role="bold">
					<property>&lt;rich:suggestionbox&gt;</property>
				</emphasis>
				component as
				<property>object selection</property>
				.
				If you want to get the selected item as object on the client side
				you should set the value of the
				<emphasis>
					<property> &quot;usingSuggestObjects&quot; </property>
				</emphasis>
				attribute
				to &quot;true&quot;.
				After that you should specify
				JavaScript method in the
				<emphasis>
					<property> &quot;onobjectchange&quot;</property>
				</emphasis>
				attribute and pass the
				<code>suggestion</code>
				object as a parameter:
			</para>
			<programlisting role="XML"><![CDATA[...
<h:inputText id="city" value="#{capitalsBean.capital}" />
<rich:suggestionbox for="city" var="result" suggestionAction="#{capitalsBean.autocomplete}"
					onobjectchange="processObjects(suggestion)" usingSuggestObjects="true">
	<h:column>
		<h:outputText value="#{result.name}" />
	</h:column>
</rich:suggestionbox>
<h:panelGroup>
	<div id="state"></div>
</h:panelGroup>
...
]]></programlisting>
			<para>
				When the item is selected you can get it as an object on the client
				side and use
				<code>getSelectedItems()</code>
				method to access any object properties:
			</para>
			<programlisting role="XML"><![CDATA[<script type="text/javascript">
function processObjects(suggestionBox) {
	var items = suggestionBox.getSelectedItems();
	var state;
	if (items && items.length > 0) {
		for ( var i = 0; i < items.length; i++) {
			state = items[i].state;
		}
		document.getElementById('state').innerHTML = "State: "+state;			
	}else{
		document.getElementById('state').innerHTML = '';
	}
}			
</script>
]]></programlisting>
			<para>
				Here is a result:
			</para>
			<figure>
				<title>
						Usage of
						<code>getSelectedItems()</code>
						method
				</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/suggestionboxAPI.png" />
					</imageobject>
				</mediaobject>
			</figure>
		</section>
		<section>
			<title>Other attributes and facets</title>
			<para>
				In addition to attributes common for Ajax action components
				and
				limiting requests quantity and frequency,
				the
				<emphasis role="bold">
					<property>&lt;rich:suggestionbox&gt;</property>
				</emphasis>
				has one more its own attribute
				limiting requests: the
				<emphasis>
					<property>&quot;minChars&quot;</property>
				</emphasis>
				attribute. This attribute defines characters quantity
				inputted into a
				field after which Ajax requests are called to perform
				suggestion.
			</para>


			<para>
				There is possibility to define what is shown if the autocomplete
				returns empty list. Attribute
				<emphasis>
					<property> &quot;nothingLabel&quot; </property>
				</emphasis>
				or facet with the same name could be used for this purpose.
			</para>
			<para>
				<emphasis role="bold">Example:</emphasis>
			</para>
			<programlisting role="XML"><![CDATA[...
<rich:suggestionbox for="city" var="result" suggestionAction="#{capitalsBean.autocomplete}"
					nothingLabel="No cities found">
	<h:column>
		<h:outputText value="#{result.name}" />
	</h:column>
</rich:suggestionbox>
...
]]></programlisting>
			<para>Here is a result:</para>
			<figure>
				<title>
					<emphasis role="bold">
						<property>&lt;rich:suggestionbox&gt;</property>
					</emphasis>
					with empty list
				</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/suggestionbox4.png" />
					</imageobject>
				</mediaobject>
			</figure>
			<para>
				You can also use facets for the further
				<emphasis role="bold">
					<property>&lt;rich:suggestionbox&gt;</property>
				</emphasis>
				customization:
			</para>
			<programlisting role="XML"><![CDATA[...
<h:inputText id="city" value="#{capitalsBean.capital}" />
<rich:suggestionbox for="city" var="result"	suggestionAction="#{capitalsBean.autocomplete}">
	<f:facet name="nothingLabel">
		<h:outputText value="No cities found" />
	</f:facet>
	<f:facet name="header">
		<h:outputText value="Select your city" />
	</f:facet>
	<h:column>
		<h:outputText value="#{result.name}" />
	</h:column>
</rich:suggestionbox>
...
]]></programlisting>
			<para>
				Here is a result:
			</para>
			<figure>
				<title>
					<emphasis role="bold">
						<property>&lt;rich:suggestionbox&gt;</property>
					</emphasis>
					facets
				</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/suggestionbox5.png" />
					</imageobject>
				</mediaobject>
			</figure>
			<para>
				Information about the
				<emphasis>
					<property>&quot;process&quot;</property>
				</emphasis>
				attribute usage you can findin the
				<link linkend="process"> &quot;Decide what to process&quot; </link>
				guide section.
			</para>
			<para>
				In RichFaces Wiki article about
				<ulink
					url="http://wiki.jboss.org/wiki/RichFacesSuggestionGettingAdditionalProperties">
					Additional Properties </ulink>
				you can find example of getting additional
				properties.
			</para>
		</section>
		<section>
			<title>Custom style classes redefinition</title>
			<para>
				In order to redefine styles for all
				<emphasis role="bold">
					<property>&lt;rich:suggestionbox&gt;</property>
				</emphasis>
				components on a page using CSS, it&apos;s enough to
				create classes
				with the same names (possible classes could be found in
				the tables
				<link linkend="suggBoxC"> above</link>
				) and define
				necessary properties in them.
			</para>

			<para>
				<emphasis role="bold">Example:</emphasis>
			</para>
			<programlisting role="CSS"><![CDATA[...
.rich-sb-int{
        font-weight:bold;
}
...]]></programlisting>

			<para>This is a result:</para>

			<figure>
				<title>Redefinition styles with predefined classes</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/suggestionbox_pc.png" />
					</imageobject>
				</mediaobject>
			</figure>

			<para>In the example the font weight for rows was changed.</para>

			<para>Also
				it&apos;s possible to change styles of particular
				<emphasis role="bold">
					<property>&lt;rich:suggestionbox&gt;</property>
				</emphasis>
				component. In this case you should create own style
				classes and use
				them in corresponding
				<emphasis role="bold">
					<property>&lt;rich:suggestionbox&gt;</property>
				</emphasis>
				<emphasis>
					<property>styleClass</property>
				</emphasis>
				attributes. An example is placed below:
			</para>

			<para>
				<emphasis role="bold">Example:</emphasis>
			</para>
			<programlisting role="CSS"><![CDATA[...
.myClass{
        background-color:#f0ddcd;
}
...]]></programlisting>
			<para>
				The
				<emphasis>
					<property>&quot;selectedClass&quot;</property>
				</emphasis>
				attribute for
				<emphasis role="bold">
					<property>&lt;rich:suggestionbox&gt;</property>
				</emphasis>
				is defined as it&apos;s shown in the example below:
			</para>

			<para>
				<emphasis role="bold">Example:</emphasis>
			</para>
			<programlisting role="XML"><![CDATA[<rich:suggestionbox ... selectedClass="myClass"/>
]]></programlisting>

			<para>This is a result:</para>

			<figure>
				<title>
					Redefinition styles with own classes and
					<emphasis>
						<property>styleClass</property>
					</emphasis>
					attributes
				</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/suggestionbox_oc.png" />
					</imageobject>
				</mediaobject>
			</figure>

			<para>As it could be seen on the picture above,background color for
				selected
				item was changed.</para>
		</section>

	</section>
	<section>
		<sectioninfo>
			<keywordset>
				<keyword>rich:suggestionbox</keyword>
			</keywordset>
		</sectioninfo>
		<title>Reference Data</title>
		<para>

			<ulink
				url="http://www.jboss.org/file-access/default/members/jbossrichfaces/freezone/docs/tlddoc/rich/suggestionbox.html">
				Table of &lt;rich:suggestionbox&gt; attributes
				</ulink>
		</para>
		<table>
			<title>Component identification parameters</title>
			<tgroup cols="2">
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Value</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>component-type</entry>
						<entry>org.richfaces.SuggestionBox</entry>
					</row>
					<row>
						<entry>component-class</entry>
						<entry>org.richfaces.component.html.HtmlSuggestionBox</entry>
					</row>
					<row>
						<entry>component-family</entry>
						<entry>org.richfaces.SuggestionBox</entry>
					</row>
					<row>
						<entry>renderer-type</entry>
						<entry>org.richfaces.SuggestionBoxRenderer</entry>
					</row>
					<row>
						<entry>tag-class</entry>
						<entry>org.richfaces.taglib.SuggestionBoxTag</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<table>
			<title>Facets</title>
			<tgroup cols="2">
				<thead>
					<row>
						<entry>Facet name</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>nothingLabel</entry>
						<entry>Redefines the content item if the autocomplete returns
							empty
							list. Related attribute is &quot;nothingLabel&quot;</entry>
					</row>
					<row>
						<entry>popup</entry>
						<entry>Redefines the content for the popup list of the suggestion
						</entry>
					</row>
					<row>
						<entry>header</entry>
						<entry>Defines the header content</entry>
					</row>
					<row>
						<entry>footer</entry>
						<entry>Defines the footer content</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<table>
			<title>JavaScript API</title>
			<tgroup cols="2">
				<thead>
					<row>
						<entry>Function</entry>

						<entry>Description</entry>
					</row>
				</thead>

				<tbody>

					<row>
						<entry>callSuggestion()</entry>
						<entry>Calls the suggestion. If the
							&quot;ignoreMinChars&quot;
							value is
							&quot;true&quot; then
							the number of symbols to send
							a query
							is no longer actual
							for callSuggestion()</entry>
					</row>

					<row>
						<entry>getSelectedItems()</entry>
						<entry>Returns the array of
							objects</entry>
					</row>

				</tbody>
			</tgroup>
		</table>
		<table id="suggBoxC">
			<title>Classes names with the corresponding skin parameters</title>
			<tgroup cols="2">
				<thead>
					<row>
						<entry>Class name</entry>
						<entry>Description</entry>
						<entry>Skin Parameters</entry>
						<entry>CSS properties</entry>

					</row>
				</thead>
				<tbody>
					<row>
						<entry morerows="2">.rich-sb-int</entry>
						<entry morerows="2">Defines the styles for a
							suggestion box table
							rows
							&lt;tr&gt;</entry>
						<entry>generalSizeFont</entry>
						<entry>font-size</entry>
					</row>
					<row>
						<entry>generalFamilyFont</entry>
						<entry>font-family</entry>
					</row>
					<row>
						<entry>generalTextColor</entry>
						<entry>color</entry>
					</row>

					<row>
						<entry morerows="3">.rich-sb-int-sel</entry>
						<entry morerows="3">Defines styles for a selected
							row</entry>
						<entry>headerBackgroundColor</entry>
						<entry>background-color</entry>
					</row>
					<row>
						<entry>generalSizeFont</entry>
						<entry>font-size</entry>
					</row>
					<row>
						<entry>generalFamilyFont</entry>
						<entry>font-family</entry>
					</row>
					<row>
						<entry>headerTextColor</entry>
						<entry>color</entry>
					</row>
					<row>
						<entry morerows="1">.rich-sb-ext-decor-2</entry>
						<entry morerows="1">Defines styles for the second
							wrapper
							&lt;div&gt;
							element of
							a suggestion box
							exterior</entry>
						<entry>panelBorderColor</entry>
						<entry>border-color</entry>
					</row>
					<row>
						<entry>additionalBackgroundColor</entry>
						<entry>background-color</entry>
					</row>
					<row>
						<entry morerows="2">.rich-sb-shadow</entry>
						<entry morerows="2">Defines styles for a suggestion
							boxshadow
						</entry>
						<entry>shadowBackgroundColor</entry>
						<entry>background-color</entry>
					</row>
					<row>
						<entry>shadowBackgroundColor</entry>
						<entry>border-color</entry>
					</row>
					<row>
						<entry>shadowOpacity</entry>
						<entry>opacity</entry>
					</row>

				</tbody>
			</tgroup>
		</table>
	</section>
	<section>
		<title>Relevant Resources Links</title>
		<para>
			Vizit
			<ulink
				url="http://livedemo.exadel.com/richfaces-demo/richfaces/suggestionBox.jsf?c=suggestionBox"><emphasis role="bold">
				<property>&lt;rich:suggestionbox&gt;</property>
			</emphasis></ulink>
			page at RichFaces Livedemo for examples of component usage and
			sources.
		</para>
		<para>
			RichFaces cookbook at JBoss Portal includes some articles that cover
			different aspects of working with
			<emphasis role="bold">
				<property>&lt;rich:suggestionbox&gt;</property>
			</emphasis>
			:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					&quot;
					<ulink url="http://www.jboss.org/community/docs/DOC-11851">Creating suggestion box dynamically</ulink>
					&quot;;
				</para>
			</listitem>
			<listitem>
				<para>
					&quot;
					<ulink url="http://www.jboss.org/community/docs/DOC-11865">Getting additional properties from
						&lt;rich:suggectionbox&gt;</ulink>
					&quot;.
				</para>
			</listitem>
		</itemizedlist>
	</section>
</section>
